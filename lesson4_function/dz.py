'''
Задачи на работу с функциями:
1) Написать функцию, которая будет искать и выводить на экран минимальное число, большее 300 и кратное 19.

2) Написать функцию, которая будет обменивать местами первую и последнюю цифру числа N (1234 → 4231).

3) Написать функцию, которая будет определять, делится ли число N на: 2, 3, 4, 5, ... (без использования оператора % )

4) Написать функцию, которая будет вычислять и выводить на экран значение выражения
N^M без использования оператора возведения в степень (**).

5) С клавиатуры вводится пять чисел. Для каждого из них вывести,
является ли оно степенью числа 3. Вынести определение степени в функцию.

6) Реализовать набор функций для работы со списком:
• Ввод с клавиатуры/инициализация случайными числами (с параметрами).
• Вывод списка на экран (в одну строчку).
• Подсчет максимума и минимума (с индексами).
• Подсчет количества элементов, равных (больших/меньших) N.
• Добавление элемента К [в конец массива/на N-ю позицию].
• Удаление из списка [последнего/Nго элемента].
• Сортировка списка по (возрастанию/убыванию). Повторяющиеся — убирать.

7) Найти третий максимум в списке.

8) Сдвинуть все элементы массива на два вправо. Оставшиеся элементы — поставить слева в том же порядке.

9) Вставить K после максимального элемента.
'''

# 1) Написать функцию, которая будет искать и выводить на экран минимальное число, большее 300 и кратное 19.

# def min_4islo(first:300, second:19):
#     i = first
#     while i % second != 0:
#         i += 1
#     print(i)
#
#
# min_4islo(200, 90)


# 2) Написать функцию, которая будет обменивать местами первую и последнюю цифру числа N (1234 → 4231).
# def foo(n):
#     n_tmp = n
#     i = 1
#     while n_tmp > 10:
#         n_tmp //= 10
#         i *= 10
#     first = n // i
#     last = n % 10
#     mid = n % i // 10
#
#     result_num = int(str(last) + str(mid) + str(first)) #1 конкатенация с преобразованием в число
#     print(result_num, type(result_num))
#
#     result_num = last * i + mid * 10 + first #2 математический способ решения
#     print(result_num)
#
#
# foo(82345671)

# 3) Написать функцию, которая будет определять, делится ли число N на: 2, 3, 4, 5, ... (без использования оператора % )
# def foo(a, b):
#     i = 0
#     while i < a:
#         i += b
#     print(i)
#     if i == a:
#         print('delitsia')
#     else:
#         print('ne delitsia')
#
#
# foo(1243, 2)


# 4) Написать функцию, которая будет вычислять и выводить на экран значение выражения
# N^M без использования оператора возведения в степень (**).
#
# def foo(a, b):
#     i = 1
#     res = 1
#     while i < b:
#         res *= a
#         i += 1
#     print(res)
#     # res = 1
#     # for _ in range(b):
#     #     res *= a
#     # print(res)
#
#
# foo(4, 4)

# 5) С клавиатуры вводится пять чисел. Для каждого из них вывести,
# является ли оно степенью числа 3. Вынести определение степени в функцию.


# def foo(num):
#     # 12
#     # 3 * 3 = 9
#     # 3 * 3 * 3 = 27 stop
#     res = 1
#     d = 3
#     while res < num:
#         res *= d
#     if res == num:
#         print(f'{res} есть степенью 3')
#     else:
#         print(f'{res} не является степенью 3')
#
#
# lst = [int(input('введите число: ')) for _ in range(5) # ввод 5 чисел в список с помощью цикла
# for i in lst:
#     foo(i)


# 6) Реализовать набор функций для работы со списком:
# • Ввод с клавиатуры/инициализация случайными числами (с параметрами).
# • Вывод списка на экран (в одну строчку).
# • Подсчет максимума и минимума (с индексами).
# • Подсчет количества элементов, равных (больших/меньших) N.
# • Добавление элемента К [в конец массива/на N-ю позицию].
# • Удаление из списка [последнего/Nго элемента].
# • Сортировка списка по (возрастанию/убыванию). Повторяющиеся — убирать.


# # • Ввод с клавиатуры/инициализация случайными числами (с параметрами).
# import random
# def foo1(count):
#     # lst = [int(input('введите число: ')) for _ in range(count)]
#     lst = [random.randint(1, 100) for _ in range(count)] #random 4isla
#     print(lst)
#
#
# foo1(15)

# • Вывод списка на экран (в одну строчку).
# def foo2(lst):
#     s = ''
#     for i in lst:
#     #     print(i, end =' ')  # v print по умалчанию end = \n (перенос строчки)
#     # print()
#         s += str(i) + ' '
#     print(s)
#
#
# foo2([1, 4, 5, 7, 8])

# • Подсчет количества элементов, равных (больших/меньших) N.
# def foo3(lst, n):
#     less_n = 0
#     equal_n = 0
#     bigger_n = 0
#     for i in lst:
#         if i < n:
#             less_n += 1
#         elif i > n:
#             bigger_n += 1
#         else:
#             equal_n += 1
#     print(f'{less_n} = less_n, {equal_n} =equal_n, {bigger_n} =bigger_n')
#
#
# foo3([1, 2, 4, 6, 7, 8, 88], 3)

# • Добавление элемента К [в конец массива/на N-ю позицию].
# def foo4(lst, k, n):
#     tmp_lst = []
#     for _ in range(len(lst)):
#         if _ == n:
#             tmp_lst.append(k)
#         tmp_lst.append(lst[_])
#     if _ == n - 1:
#         tmp_lst.append(k)
#     print(tmp_lst)
#
# foo4([1, 2, 4, 6, 7, 9, 100, 225], 777, 8)


# • Удаление из списка [последнего/Nго элемента].
# def foo4(lst, n):
#     tmp_lst = []
#     i = 0
#     while i < len(lst):
#         if i == n:
#             i += 1
#         tmp_lst.append(lst[i])
#         i += 1
#     print(tmp_lst)
#
# foo4([1, 2, 4, 6, 7, 9, 100, 225], 6,)


# • Сортировка списка по (возрастанию/убыванию). Повторяющиеся — убирать.
# первый вариант сортировка выбором находим наименьшее добавляем в новый список и удаляем из текущего
# lst.sort() второй вариант квик сорт

# сортировка пузырьком

# lst = [12, 4, 66, 654, 23, 32, 65, 13]
#
# def foo(lst):
#     for i in range(len(lst) - 1):         # -1 оптимизация последнего сравнения которое не нужно
#         for j in range(len(lst) - i - 1): #-i оптимизация если подследние элементы не делают свап то не учавствуют в след сравнении
#             if lst[j] > lst[j + 1]:
#                 tmp = lst[j]
#                 lst[j] = lst[j + 1]
#                 lst[j + 1] = tmp
#     print(lst)

# 7) Найти третий максимум в списке.
#
# def foo(lst):
#     max_lst = []
#     for _ in range(3):
#         max_elem = lst[0]
#         for i in lst:
#             if i > max_elem and i not in max_lst:
#                 max_elem = i
#         max_lst.append(max_elem)
#     print(max_lst)
#
# foo([12, 4, 66, 654, 23, 32, 65, 13])


# 8) Сдвинуть все элементы массива на два вправо. Оставшиеся элементы — поставить слева в том же порядке.

# def foo(lst):
#     if len(lst) > 1:
#         # lst = [4, 5, 1, 2, 3] надо сделать так, используем второй список
#         res_lst = [0] * len(lst)
#         res_lst[0] = lst[-2]
#         res_lst[1] = lst[-1]
#         i = 2
#         while i < len(lst):
#             res_lst[i] = lst[i -2]
#             i += 1
#         print(res_lst)
#     else:
#         print('список слишклм мал')
#
# foo([1, 2, 3, 4, 5, 6, 7, 8])


# 9) Вставить K после максимального элемента. + подсчет максимума с индексом

# def foo4(lst, k, n):
#     tmp_lst = []
#     for _ in range(len(lst)):
#         if _ == n:
#             tmp_lst.append(k)
#         tmp_lst.append(lst[_])
#     if _ == n - 1:
#         tmp_lst.append(k)
#     print(tmp_lst)
#
#     # поиск максимального элемента и его индекса
#     def foo(lst):
#         max_elem = lst[0]
#         max_index = 0
#         i = 0
#         for elem in lst:
#             if elem > max_elem:
#                 max_elem = elem
#                 max_index = i
#             i += 1
#             # print(max elem)
#         foo4(lst, max_index + 1, k)
#
#
# foo4([1, 2, 4, 6, 7, 9, 100, 225, 54, 67], 777, 8)